---
description: Comprehensive Husky Git hooks configuration for automated code quality checks, commit message validation, and pre-push testing following modern Git workflow standards
globs: "*.{json,js,ts,sh}"
alwaysApply: false
---

<rule>
  <meta>
    <title>Husky Core Standards Auto</title>
    <description>Comprehensive Husky Git hooks configuration for automated code quality checks, commit message validation, and pre-push testing following modern Git workflow standards</description>
    <created-at utc-timestamp="1744252280">January 27, 2025, 1:31 PM</created-at>
    <last-updated-at utc-timestamp="1744252280">January 27, 2025, 1:31 PM</last-updated-at>
    <applies-to>
      <file-matcher glob="*.{json,js,ts,sh}">Package configuration and Git hook script files</file-matcher>
      <action-matcher action="git-hooks-setup">Triggered when configuring Git hooks for code quality</action-matcher>
    </applies-to>
  </meta>
  <requirements>
    <non-negotiable priority="critical">
      <description>Use Husky 8+ with modern configuration, automated installation, and comprehensive Git hooks for code quality enforcement following Git workflow best practices.</description>
      <examples>
        <example title="Modern Husky Setup">
          <correct-example title="Husky 8+ configuration with automated setup" conditions="Setting up Husky for Git hooks" expected-result="Automated Git hooks with code quality checks" correctness-criteria="Uses Husky 8+, automated installation, comprehensive hooks, proper error handling"><![CDATA[// package.json - Husky setup and dependencies
{
  "name": "my-project",
  "scripts": {
    // Husky installation and setup
    "prepare": "husky install",
    "postinstall": "husky install",
    
    // Code quality scripts
    "lint": "eslint . --ext js,ts,jsx,tsx --max-warnings 0",
    "lint:fix": "eslint . --ext js,ts,jsx,tsx --fix",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "type-check": "tsc --noEmit",
    "test": "jest",
    "test:coverage": "jest --coverage",
    "test:changed": "jest --changedSince=HEAD~1",
    
    // Build and validation
    "build": "tsc && vite build",
    "validate": "npm run lint && npm run type-check && npm run test && npm run build"
  },
  "devDependencies": {
    "husky": "^8.0.3",
    "lint-staged": "^15.2.0",
    "@commitlint/cli": "^18.4.0",
    "@commitlint/config-conventional": "^18.4.0",
    "eslint": "^8.55.0",
    "prettier": "^3.1.0",
    "typescript": "^5.3.0",
    "jest": "^29.7.0"
  },
  "lint-staged": {
    "*.{js,jsx,ts,tsx}": [
      "eslint --fix",
      "prettier --write"
    ],
    "*.{json,md,yml,yaml}": [
      "prettier --write"
    ],
    "*.{css,scss,less}": [
      "prettier --write"
    ]
  }
}

// .husky/pre-commit - Comprehensive pre-commit hook
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "🔍 Running pre-commit checks..."

# Run lint-staged for changed files
echo "📝 Checking staged files..."
npx lint-staged

# Type checking
echo "🔍 Type checking..."
npm run type-check

# Run tests for changed files
echo "🧪 Running tests for changed files..."
npm run test:changed -- --passWithNoTests

echo "✅ Pre-commit checks completed successfully!"

// .husky/commit-msg - Commit message validation
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "📝 Validating commit message..."
npx --no -- commitlint --edit $1

// .husky/pre-push - Pre-push validation
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "🚀 Running pre-push checks..."

# Full lint check
echo "📋 Running full lint check..."
npm run lint

# Type checking
echo "🔍 Running type check..."
npm run type-check

# Full test suite
echo "🧪 Running full test suite..."
npm run test

# Build verification
echo "🏗️ Verifying build..."
npm run build

echo "✅ Pre-push checks completed successfully!"

// .husky/post-merge - Post-merge cleanup and setup
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "🔄 Running post-merge setup..."

# Check for package.json changes
if git diff HEAD@{1} --name-only | grep -q "package.json"; then
  echo "📦 package.json changed, running npm install..."
  npm install
fi

# Check for dependency changes
if git diff HEAD@{1} --name-only | grep -q "package-lock.json\|yarn.lock\|pnpm-lock.yaml"; then
  echo "🔒 Lock file changed, dependencies may need updating..."
  echo "💡 Consider running: npm ci"
fi

echo "✅ Post-merge setup completed!"

// .commitlintrc.js - Commit message configuration
module.exports = {
  extends: ['@commitlint/config-conventional'],
  rules: {
    'type-enum': [
      2,
      'always',
      [
        'feat',     // New feature
        'fix',      // Bug fix
        'docs',     // Documentation changes
        'style',    // Code style changes (formatting, etc.)
        'refactor', // Code refactoring
        'perf',     // Performance improvements
        'test',     // Adding or updating tests
        'chore',    // Maintenance tasks
        'ci',       // CI/CD changes
        'build',    // Build system changes
        'revert',   // Reverting previous changes
      ],
    ],
    'type-case': [2, 'always', 'lower-case'],
    'type-empty': [2, 'never'],
    'scope-case': [2, 'always', 'lower-case'],
    'subject-case': [2, 'always', 'sentence-case'],
    'subject-empty': [2, 'never'],
    'subject-full-stop': [2, 'never', '.'],
    'subject-max-length': [2, 'always', 72],
    'body-leading-blank': [2, 'always'],
    'body-max-line-length': [2, 'always', 100],
    'footer-leading-blank': [2, 'always'],
    'footer-max-line-length': [2, 'always', 100],
  },
};

// Setup script for team onboarding
// scripts/setup-husky.js
#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('🐕 Setting up Husky Git hooks...');

try {
  // Install Husky
  console.log('📦 Installing Husky...');
  execSync('npx husky install', { stdio: 'inherit' });

  // Create hook files
  const hooks = [
    {
      name: 'pre-commit',
      content: `#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "🔍 Running pre-commit checks..."
npx lint-staged
npm run type-check
npm run test:changed -- --passWithNoTests
echo "✅ Pre-commit checks completed!"`,
    },
    {
      name: 'commit-msg',
      content: `#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "📝 Validating commit message..."
npx --no -- commitlint --edit $1`,
    },
    {
      name: 'pre-push',
      content: `#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "🚀 Running pre-push checks..."
npm run lint
npm run type-check
npm run test
npm run build
echo "✅ Pre-push checks completed!"`,
    },
  ];

  hooks.forEach(hook => {
    const hookPath = path.join('.husky', hook.name);
    fs.writeFileSync(hookPath, hook.content);
    fs.chmodSync(hookPath, '755');
    console.log(`✅ Created ${hook.name} hook`);
  });

  console.log('🎉 Husky setup completed successfully!');
  console.log('💡 Hooks installed:');
  console.log('   - pre-commit: Runs lint-staged, type check, and tests');
  console.log('   - commit-msg: Validates commit message format');
  console.log('   - pre-push: Runs full validation suite');

} catch (error) {
  console.error('❌ Husky setup failed:', error.message);
  process.exit(1);
}

// Makefile for easy hook management
.PHONY: hooks-install hooks-uninstall hooks-test hooks-skip

hooks-install:
	npx husky install
	node scripts/setup-husky.js

hooks-uninstall:
	rm -rf .husky/_
	git config --unset core.hooksPath

hooks-test:
	echo "Testing pre-commit hook..."
	.husky/pre-commit
	echo "Testing commit-msg hook..."
	echo "feat: test commit message" | .husky/commit-msg /dev/stdin

hooks-skip:
	@echo "To skip hooks for a single commit:"
	@echo "git commit --no-verify -m 'your message'"
	@echo ""
	@echo "To disable hooks temporarily:"
	@echo "git config core.hooksPath /dev/null"
	@echo ""
	@echo "To re-enable hooks:"
	@echo "npx husky install"

// CI/CD integration - GitHub Actions
name: Validate Hooks
on: [push, pull_request]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for commitlint
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - run: npm ci
      - run: npm run prepare # Install husky
      
      # Validate commit messages (for PR)
      - name: Validate commit messages
        if: github.event_name == 'pull_request'
        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose
      
      # Run the same checks as pre-push hook
      - run: npm run lint
      - run: npm run type-check
      - run: npm run test
      - run: npm run build]]></correct-example>
          <incorrect-example title="Basic Husky setup without comprehensive hooks" conditions="Setting up Husky for Git hooks" expected-result="Automated Git hooks with code quality checks" incorrectness-criteria="Uses outdated Husky version, minimal hooks, no error handling"><![CDATA[// Bad: Outdated Husky setup
{
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "lint-staged": {
    "*.js": "eslint"
  }
}

// Bad: Minimal pre-commit hook
#!/usr/bin/env sh
eslint .

// Missing:
// - Modern Husky 8+ configuration
// - Comprehensive hook coverage
// - Error handling and messaging
// - Commit message validation
// - Type checking integration
// - Test execution]]></incorrect-example>
        </example>
      </examples>
    </non-negotiable>

    <non-negotiable priority="critical">
      <description>Implement comprehensive commit message validation using Commitlint with conventional commit standards and automated enforcement.</description>
      <examples>
        <example title="Commit Message Validation">
          <correct-example title="Comprehensive Commitlint configuration" conditions="Setting up commit message validation" expected-result="Enforced commit message standards" correctness-criteria="Uses conventional commits, proper validation rules, helpful error messages"><![CDATA[// .commitlintrc.js - Comprehensive commit message rules
module.exports = {
  extends: ['@commitlint/config-conventional'],
  
  // Custom rules for team standards
  rules: {
    // Type requirements
    'type-enum': [
      2,
      'always',
      [
        'feat',     // ✨ New feature for the user
        'fix',      // 🐛 Bug fix for the user
        'docs',     // 📚 Changes to documentation
        'style',    // 💄 Formatting, missing semicolons, etc
        'refactor', // ♻️ Refactoring production code
        'test',     // 🧪 Adding missing tests
        'chore',    // 🔧 Updating grunt tasks etc
        'perf',     // ⚡ Performance improvements
        'ci',       // 👷 CI/CD changes
        'build',    // 📦 Build system changes
        'revert',   // ⏪ Reverts a previous commit
        'wip',      // 🚧 Work in progress (discouraged for main branch)
      ],
    ],
    
    // Format rules
    'type-case': [2, 'always', 'lower-case'],
    'type-empty': [2, 'never'],
    'scope-case': [2, 'always', 'lower-case'],
    'scope-empty': [0], // Allow empty scope
    'scope-max-length': [2, 'always', 20],
    
    // Subject rules
    'subject-case': [2, 'always', 'sentence-case'],
    'subject-empty': [2, 'never'],
    'subject-full-stop': [2, 'never', '.'],
    'subject-max-length': [2, 'always', 72],
    'subject-min-length': [2, 'always', 3],
    
    // Body rules
    'body-leading-blank': [2, 'always'],
    'body-max-line-length': [2, 'always', 100],
    'body-case': [0], // Allow any case in body
    
    // Footer rules
    'footer-leading-blank': [2, 'always'],
    'footer-max-line-length': [2, 'always', 100],
    
    // Custom rules
    'signed-off-by': [0], // Disable signed-off-by requirement
    'trailer-exists': [0], // Disable trailer requirement
  },
  
  // Custom plugins for team-specific rules
  plugins: [
    {
      rules: {
        'jira-ticket-reference': (parsed) => {
          const { subject, body, footer } = parsed;
          const jiraPattern = /[A-Z]+-\d+/;
          
          // Check if JIRA ticket is mentioned
          const hasJiraReference = 
            jiraPattern.test(subject || '') ||
            jiraPattern.test(body || '') ||
            jiraPattern.test(footer || '');
          
          // Allow certain types without JIRA reference
          const exemptTypes = ['docs', 'style', 'chore', 'ci', 'build'];
          if (exemptTypes.includes(parsed.type)) {
            return [true];
          }
          
          return [
            hasJiraReference,
            'Commit message must include JIRA ticket reference (e.g., PROJ-123)',
          ];
        },
      },
    },
  ],
  
  // Help text for developers
  helpUrl: 'https://conventionalcommits.org/',
  
  // Ignore certain commit patterns
  ignores: [
    (commit) => commit.includes('WIP'),
    (commit) => commit.includes('wip'),
    (commit) => commit.includes('Merge'),
  ],
};

// commit-msg-template.txt - Template for developers
# <type>(<scope>): <subject>
#
# <body>
#
# <footer>

# Example:
# feat(auth): add OAuth2 integration
# 
# Implement OAuth2 authentication flow with Google and GitHub providers.
# This allows users to sign in with their existing accounts.
# 
# Closes PROJ-123
# Breaking-change: Updates authentication API

# Types:
# feat:     ✨ New feature
# fix:      🐛 Bug fix  
# docs:     📚 Documentation
# style:    💄 Formatting
# refactor: ♻️ Code refactoring
# test:     🧪 Adding tests
# chore:    🔧 Maintenance
# perf:     ⚡ Performance
# ci:       👷 CI/CD
# build:    📦 Build system
# revert:   ⏪ Revert changes

# Rules:
# - Use imperative mood ("add" not "added" or "adds")
# - Don't capitalize subject line
# - No period at the end of subject
# - Subject line under 72 characters
# - Include JIRA ticket for features/fixes
# - Use body to explain what and why

// scripts/setup-commit-template.js
#!/usr/bin/env node
const { execSync } = require('child_process');
const path = require('path');

console.log('📝 Setting up commit message template...');

try {
  const templatePath = path.resolve('.gitmessage');
  execSync(`git config commit.template ${templatePath}`, { stdio: 'inherit' });
  console.log('✅ Commit template configured!');
  console.log('💡 Use "git commit" (without -m) to use the template');
} catch (error) {
  console.error('❌ Failed to setup commit template:', error.message);
}

// Enhanced commit-msg hook with better error handling
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "📝 Validating commit message..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Run commitlint
if npx --no -- commitlint --edit $1; then
  echo "${GREEN}✅ Commit message is valid!${NC}"
else
  echo "${RED}❌ Commit message validation failed!${NC}"
  echo ""
  echo "${YELLOW}💡 Commit message format should be:${NC}"
  echo "   ${YELLOW}<type>(<scope>): <subject>${NC}"
  echo ""
  echo "${YELLOW}Examples:${NC}"
  echo "   ${GREEN}feat(auth): add OAuth2 integration${NC}"
  echo "   ${GREEN}fix(ui): resolve button alignment issue${NC}"
  echo "   ${GREEN}docs: update installation guide${NC}"
  echo ""
  echo "${YELLOW}Valid types:${NC} feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert"
  echo ""
  echo "${YELLOW}📖 See: https://conventionalcommits.org/${NC}"
  exit 1
fi

// package.json scripts for commit message management
{
  "scripts": {
    "commit": "git-cz",
    "commit:template": "git config commit.template .gitmessage",
    "commit:lint": "commitlint --from HEAD~1 --to HEAD --verbose",
    "commit:lint-last": "commitlint --edit --verbose",
    "commit:help": "echo 'Commit format: <type>(<scope>): <subject>' && echo 'Types: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert'"
  },
  "config": {
    "commitizen": {
      "path": "./node_modules/cz-conventional-changelog"
    }
  }
}

// GitHub workflow for commit message validation
name: Validate Commits
on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  commitlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - run: npm ci
      
      - name: Validate commit messages
        run: |
          npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

      - name: Comment on PR if validation fails
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ **Commit Message Validation Failed**
              
              Please ensure your commit messages follow the conventional commit format:
              \`<type>(<scope>): <subject>\`
              
              **Valid types:** feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert
              
              **Examples:**
              - \`feat(auth): add OAuth2 integration\`
              - \`fix(ui): resolve button alignment issue\`
              - \`docs: update installation guide\`
              
              📖 [Conventional Commits](https://conventionalcommits.org/)`
            })]]></correct-example>
          <incorrect-example title="Basic commit message validation" conditions="Setting up commit message validation" expected-result="Enforced commit message standards" incorrectness-criteria="Minimal validation rules, poor error messages, no team standards"><![CDATA[// Bad: Minimal commitlint configuration
module.exports = {
  extends: ['@commitlint/config-conventional'],
};

// Bad: Basic commit-msg hook
#!/usr/bin/env sh
npx commitlint --edit $1

// Missing:
// - Custom validation rules
// - Helpful error messages
// - Team-specific standards
// - JIRA integration
// - Proper formatting guidance]]></incorrect-example>
        </example>
      </examples>
    </non-negotiable>

    <requirement priority="critical">
      <description>Configure performance-optimized Git hooks with conditional execution, parallel processing, and proper error handling for large repositories.</description>
      <examples>
        <example title="Performance-Optimized Git Hooks">
          <correct-example title="Optimized Git hooks for large repositories" conditions="Setting up Git hooks for large projects" expected-result="Fast and reliable Git hooks" correctness-criteria="Conditional execution, parallel processing, error handling, performance monitoring"><![CDATA[// .husky/pre-commit - Performance-optimized pre-commit hook
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "${BLUE}🔍 Running optimized pre-commit checks...${NC}"

# Start timing
start_time=$(date +%s)

# Function to run checks in parallel
run_parallel_checks() {
  local pids=()
  
  # Lint staged files in background
  echo "${YELLOW}📝 Linting staged files...${NC}"
  npx lint-staged &
  pids[0]=$!
  
  # Type checking in background (only if TS files changed)
  if git diff --cached --name-only | grep -E '\.(ts|tsx)$' > /dev/null; then
    echo "${YELLOW}🔍 Type checking changed TypeScript files...${NC}"
    npm run type-check &
    pids[1]=$!
  else
    echo "${GREEN}⏭️  No TypeScript files changed, skipping type check${NC}"
    pids[1]=""
  fi
  
  # Run tests for changed files in background
  changed_test_files=$(git diff --cached --name-only | grep -E '\.(test|spec)\.(js|ts|jsx|tsx)$')
  if [ -n "$changed_test_files" ] || git diff --cached --name-only | grep -E '\.(js|ts|jsx|tsx)$' > /dev/null; then
    echo "${YELLOW}🧪 Running tests for changed files...${NC}"
    npm run test:changed -- --passWithNoTests --bail &
    pids[2]=$!
  else
    echo "${GREEN}⏭️  No test-related files changed, skipping tests${NC}"
    pids[2]=""
  fi
  
  # Wait for all background processes
  local exit_code=0
  for i in "${!pids[@]}"; do
    if [ -n "${pids[$i]}" ]; then
      if ! wait "${pids[$i]}"; then
        exit_code=1
        case $i in
          0) echo "${RED}❌ Linting failed${NC}" ;;
          1) echo "${RED}❌ Type checking failed${NC}" ;;
          2) echo "${RED}❌ Tests failed${NC}" ;;
        esac
      else
        case $i in
          0) echo "${GREEN}✅ Linting passed${NC}" ;;
          1) echo "${GREEN}✅ Type checking passed${NC}" ;;
          2) echo "${GREEN}✅ Tests passed${NC}" ;;
        esac
      fi
    fi
  done
  
  return $exit_code
}

# Function to check if we should skip certain checks
should_skip_checks() {
  # Skip on merge commits
  if git rev-parse -q --verify MERGE_HEAD >/dev/null; then
    echo "${YELLOW}⏭️  Merge commit detected, skipping some checks${NC}"
    return 0
  fi
  
  # Skip on revert commits
  if git log -1 --pretty=%B | grep -q "^Revert"; then
    echo "${YELLOW}⏭️  Revert commit detected, skipping some checks${NC}"
    return 0
  fi
  
  return 1
}

# Main execution
if should_skip_checks; then
  echo "${GREEN}✅ Pre-commit checks skipped for special commit type${NC}"
  exit 0
fi

# Check if there are staged files
if ! git diff --cached --quiet; then
  if run_parallel_checks; then
    end_time=$(date +%s)
    duration=$((end_time - start_time))
    echo "${GREEN}✅ All pre-commit checks passed in ${duration}s!${NC}"
  else
    echo "${RED}❌ Pre-commit checks failed${NC}"
    echo "${YELLOW}💡 Fix the issues above and try again${NC}"
    exit 1
  fi
else
  echo "${YELLOW}⚠️  No staged files found${NC}"
fi

// .husky/pre-push - Optimized pre-push hook
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo "${BLUE}🚀 Running optimized pre-push checks...${NC}"

# Check if we're pushing to main/master
branch=$(git rev-parse --abbrev-ref HEAD)
if [ "$branch" = "main" ] || [ "$branch" = "master" ]; then
  echo "${YELLOW}⚠️  Pushing to ${branch} branch - running full validation${NC}"
  FULL_VALIDATION=true
else
  echo "${BLUE}ℹ️  Pushing to ${branch} branch - running standard checks${NC}"
  FULL_VALIDATION=false
fi

# Function to run optimized checks
run_push_checks() {
  local pids=()
  local exit_code=0
  
  # Always run linting
  echo "${YELLOW}📋 Running ESLint...${NC}"
  npm run lint &
  pids[0]=$!
  
  # Always run type checking
  echo "${YELLOW}🔍 Running TypeScript check...${NC}"
  npm run type-check &
  pids[1]=$!
  
  # Run appropriate test suite
  if [ "$FULL_VALIDATION" = true ]; then
    echo "${YELLOW}🧪 Running full test suite...${NC}"
    npm run test -- --coverage &
    pids[2]=$!
    
    echo "${YELLOW}🏗️  Running build...${NC}"
    npm run build &
    pids[3]=$!
  else
    echo "${YELLOW}🧪 Running changed tests...${NC}"
    npm run test:changed -- --passWithNoTests &
    pids[2]=$!
  fi
  
  # Wait for all processes
  for i in "${!pids[@]}"; do
    if ! wait "${pids[$i]}"; then
      exit_code=1
      case $i in
        0) echo "${RED}❌ Linting failed${NC}" ;;
        1) echo "${RED}❌ Type checking failed${NC}" ;;
        2) echo "${RED}❌ Tests failed${NC}" ;;
        3) echo "${RED}❌ Build failed${NC}" ;;
      esac
    else
      case $i in
        0) echo "${GREEN}✅ Linting passed${NC}" ;;
        1) echo "${GREEN}✅ Type checking passed${NC}" ;;
        2) echo "${GREEN}✅ Tests passed${NC}" ;;
        3) echo "${GREEN}✅ Build passed${NC}" ;;
      esac
    fi
  done
  
  return $exit_code
}

# Run the checks
if run_push_checks; then
  echo "${GREEN}✅ All pre-push checks passed!${NC}"
  if [ "$FULL_VALIDATION" = true ]; then
    echo "${GREEN}🎉 Ready to push to ${branch}!${NC}"
  fi
else
  echo "${RED}❌ Pre-push checks failed${NC}"
  echo "${YELLOW}💡 Please fix the issues before pushing${NC}"
  exit 1
fi

// scripts/optimize-hooks.js - Hook performance monitoring
#!/usr/bin/env node
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('⚡ Optimizing Git hooks for performance...');

// Check repository size and adjust hook behavior
function analyzeRepository() {
  try {
    const gitStats = execSync('git rev-list --all --count', { encoding: 'utf8' });
    const commitCount = parseInt(gitStats.trim());
    
    const fileCount = execSync('find . -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" | wc -l', { encoding: 'utf8' });
    const jsFileCount = parseInt(fileCount.trim());
    
    console.log(`📊 Repository analysis:`);
    console.log(`   - Commits: ${commitCount}`);
    console.log(`   - JS/TS files: ${jsFileCount}`);
    
    return {
      isLarge: commitCount > 1000 || jsFileCount > 500,
      commitCount,
      jsFileCount,
    };
  } catch (error) {
    console.warn('⚠️  Could not analyze repository size');
    return { isLarge: false, commitCount: 0, jsFileCount: 0 };
  }
}

// Generate optimized hook configuration
function generateOptimizedConfig(repoInfo) {
  const config = {
    // Adjust based on repository size
    parallelism: repoInfo.isLarge ? 4 : 2,
    timeouts: {
      lint: repoInfo.isLarge ? 120 : 60,
      typeCheck: repoInfo.isLarge ? 180 : 90,
      test: repoInfo.isLarge ? 300 : 120,
    },
    
    // Conditional execution rules
    skipRules: {
      mergeCommits: true,
      revertCommits: true,
      docsOnly: repoInfo.isLarge, // Skip tests for docs-only changes in large repos
    },
  };
  
  fs.writeFileSync('.husky/config.json', JSON.stringify(config, null, 2));
  console.log('⚙️  Generated optimized hook configuration');
  
  return config;
}

// Main optimization
const repoInfo = analyzeRepository();
const config = generateOptimizedConfig(repoInfo);

if (repoInfo.isLarge) {
  console.log('🚀 Applied large repository optimizations');
} else {
  console.log('✅ Applied standard repository configuration');
}

console.log('💡 Optimization tips:');
console.log('   - Use "git commit --no-verify" to bypass hooks when needed');
console.log('   - Consider using "lint-staged" for better performance');
console.log('   - Run "npm run validate" manually for full checks');]]></correct-example>
          <incorrect-example title="Unoptimized Git hooks" conditions="Setting up Git hooks for large projects" expected-result="Fast and reliable Git hooks" incorrectness-criteria="Sequential execution, no conditional logic, poor error handling"><![CDATA[// Bad: Unoptimized pre-commit hook
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Sequential execution - slow for large repos
npx lint-staged
npm run type-check
npm run test
npm run build

# Missing:
// - Parallel execution
// - Conditional checks based on changed files
// - Performance monitoring
// - Error handling and user feedback
// - Repository size considerations]]></incorrect-example>
        </example>
      </examples>
    </requirement>
  </requirements>
  
  <context description="Modern Husky and Git hooks considerations">
    Husky has evolved significantly with version 8.0, introducing simplified configuration, better performance, and improved developer experience. Modern Git workflow automation emphasizes selective execution, performance optimization, and comprehensive validation.

    Key considerations for modern Husky usage:
    - Husky 8+ uses simplified installation and configuration
    - Performance optimization through parallel execution and conditional checks
    - Comprehensive commit message validation with conventional commits
    - Integration with modern development tools like lint-staged and TypeScript
    - CI/CD pipeline integration for consistent validation
    - Team onboarding automation and documentation
    - Repository size considerations for large codebases

    Expert insights from the Husky community and Git workflow specialists emphasize the importance of balancing thoroughness with performance, providing clear feedback to developers, and maintaining consistency across team members and CI environments.
  </context>
  
  <references>
    <reference as="dependency" href=".cursor/rules/team-standards/cursor-rules-creation-auto.mdc" reason="Follows standard rule format">Base rule format definition</reference>
    <reference as="context" href="https://typicode.github.io/husky/" reason="Official Husky documentation">Husky Official Documentation</reference>
    <reference as="context" href="https://commitlint.js.org/" reason="Commit message validation">Commitlint Documentation</reference>
    <reference as="context" href="https://conventionalcommits.org/" reason="Commit message standards">Conventional Commits Specification</reference>
    <reference as="context" href="https://github.com/okonet/lint-staged" reason="Selective file linting">Lint-staged Documentation</reference>
    <reference as="context" href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks" reason="Git hooks fundamentals">Git Hooks Documentation</reference>
  </references>
</rule>
description:
globs:
alwaysApply: false
---
