<rule>
  <meta>
    <title>Bandit Core Standards</title>
    <description>Comprehensive Bandit HTTP server standards for Elixir with Plug integration, performance optimization, security configuration, and production deployment following modern HTTP server best practices</description>
    <created-at utc-timestamp="1744157700">January 25, 2025, 10:15 AM</created-at>
    <last-updated-at utc-timestamp="1744157700">January 25, 2025, 10:15 AM</last-updated-at>
    <applies-to>
      <file-matcher glob="*.{ex,exs}">Elixir source files using Bandit HTTP server</file-matcher>
      <file-matcher glob="**/config/**/*">Configuration files for HTTP server setup</file-matcher>
      <file-matcher glob="**/lib/**/*_web/**/*">Web layer files that may use Bandit</file-matcher>
      <file-matcher glob="**/*bandit*">Bandit-specific configuration and modules</file-matcher>
      <action-matcher action="http-server">Triggered when working with HTTP server configuration</action-matcher>
    </applies-to>
  </meta>
  <requirements>
    <non-negotiable priority="critical">
      <description>Use Bandit as a high-performance HTTP server with proper Plug integration, comprehensive security configuration, performance optimization, and production-ready deployment. Implement proper error handling, logging, and monitoring for robust HTTP service delivery.</description>
      <examples>
        <example title="Comprehensive Bandit Server Configuration">
          <correct-example title="Production-ready Bandit setup with security and performance optimization" conditions="Configuring Bandit HTTP server for production use" expected-result="Secure, performant, and maintainable HTTP server" correctness-criteria="Security configuration, performance optimization, proper error handling, monitoring integration"><![CDATA[# Elixir - Comprehensive Bandit HTTP server implementation

# Configuration (config/config.exs)
import Config

# Base Bandit configuration
config :bandit,
  # HTTP/2 support for better performance
  http_2_enabled: true,
  # Compression support
  compress: true,
  # Maximum request body size (100MB)
  max_request_size: 100 * 1024 * 1024,
  # Connection timeout settings
  read_timeout: 30_000,
  # Maximum number of concurrent connections
  max_connections: 16_384,
  # Enable request logging
  log_requests: true,
  # Custom error handler
  error_handler: MyApp.BanditErrorHandler

# Environment-specific configurations
if config_env() == :prod do
  config :bandit,
    # Production optimizations
    port: String.to_integer(System.get_env("PORT") || "4000"),
    # Enable HTTPS in production
    https: [
      port: String.to_integer(System.get_env("HTTPS_PORT") || "4443"),
      cipher_suite: :strong,
      keyfile: System.get_env("SSL_KEY_PATH"),
      certfile: System.get_env("SSL_CERT_PATH"),
      # Modern TLS configuration
      versions: [:"tlsv1.2", :"tlsv1.3"],
      # Security headers
      secure_renegotiate: true,
      reuse_sessions: true,
      honor_cipher_order: true
    ],
    # Performance tuning for production
    pool_size: System.schedulers_online() * 2,
    max_connections: 65_536,
    # Reduced timeouts for production
    read_timeout: 15_000,
    # Compression for better bandwidth usage
    compress: true,
    # Enhanced logging
    log_requests: false,  # Use custom logger instead
    access_log: [
      format: :combined,
      file: "logs/access.log"
    ]
end

if config_env() == :dev do
  config :bandit,
    port: 4000,
    # Development-friendly settings
    log_requests: true,
    # Lower connection limits for development
    max_connections: 1024,
    # Longer timeouts for debugging
    read_timeout: 60_000,
    # Hot code reloading support
    reloadable_apps: [:my_app]
end

if config_env() == :test do
  config :bandit,
    port: 4002,
    # Test-specific settings
    log_requests: false,
    max_connections: 100,
    read_timeout: 5_000
end

# Main HTTP server module with Bandit integration
defmodule MyApp.HTTPServer do
  @moduledoc """
  Production-ready HTTP server using Bandit with comprehensive configuration,
  security measures, and performance optimization.
  """

  use GenServer
  require Logger

  # Server state
  defstruct [
    :pid,
    :port,
    :scheme,
    :options,
    :metrics_ref,
    :start_time
  ]

  # Type definitions
  @type server_state :: %__MODULE__{
    pid: pid() | nil,
    port: pos_integer(),
    scheme: :http | :https,
    options: keyword(),
    metrics_ref: reference() | nil,
    start_time: DateTime.t() | nil
  }

  @type server_options :: [
    port: pos_integer(),
    scheme: :http | :https,
    plug: module(),
    bandit_options: keyword()
  ]

  # API functions
  @spec start_link(server_options()) :: GenServer.on_start()
  def start_link(opts \\ []) do
    GenServer.start_link(__MODULE__, opts, name: __MODULE__)
  end

  @spec stop() :: :ok
  def stop do
    GenServer.call(__MODULE__, :stop)
  end

  @spec get_status() :: %{
    running: boolean(),
    uptime: non_neg_integer(),
    connections: non_neg_integer(),
    requests_total: non_neg_integer(),
    port: pos_integer(),
    scheme: atom()
  }
  def get_status do
    GenServer.call(__MODULE__, :get_status)
  end

  @spec restart() :: :ok | {:error, term()}
  def restart do
    GenServer.call(__MODULE__, :restart)
  end

  # GenServer implementation
  @impl GenServer
  def init(opts) do
    # Parse and validate options
    port = Keyword.get(opts, :port, 4000)
    scheme = Keyword.get(opts, :scheme, :http)
    plug = Keyword.get(opts, :plug, MyAppWeb.Endpoint)
    bandit_options = Keyword.get(opts, :bandit_options, [])

    # Build comprehensive Bandit options
    server_options = build_server_options(port, scheme, plug, bandit_options)

    # Initialize metrics
    metrics_ref = start_metrics_collection()

    state = %__MODULE__{
      port: port,
      scheme: scheme,
      options: server_options,
      metrics_ref: metrics_ref,
      start_time: DateTime.utc_now()
    }

    # Start the server
    case start_bandit_server(server_options) do
      {:ok, pid} ->
        Logger.info("Bandit HTTP server started",
          scheme: scheme,
          port: port,
          pid: inspect(pid)
        )
        
        {:ok, %{state | pid: pid}}
        
      {:error, reason} ->
        Logger.error("Failed to start Bandit server",
          reason: inspect(reason),
          port: port,
          scheme: scheme
        )
        
        {:stop, reason}
    end
  end

  @impl GenServer
  def handle_call(:stop, _from, state) do
    case state.pid do
      nil -> 
        {:reply, :ok, state}
      pid ->
        :ok = Bandit.shutdown(pid)
        stop_metrics_collection(state.metrics_ref)
        
        Logger.info("Bandit HTTP server stopped")
        {:reply, :ok, %{state | pid: nil}}
    end
  end

  @impl GenServer
  def handle_call(:get_status, _from, state) do
    uptime = if state.start_time do
      DateTime.diff(DateTime.utc_now(), state.start_time, :second)
    else
      0
    end

    status = %{
      running: state.pid != nil,
      uptime: uptime,
      connections: get_connection_count(state.pid),
      requests_total: get_request_count(state.metrics_ref),
      port: state.port,
      scheme: state.scheme
    }

    {:reply, status, state}
  end

  @impl GenServer
  def handle_call(:restart, _from, state) do
    case restart_server(state) do
      {:ok, new_pid} ->
        Logger.info("Bandit HTTP server restarted", pid: inspect(new_pid))
        {:reply, :ok, %{state | pid: new_pid, start_time: DateTime.utc_now()}}
      
      {:error, reason} ->
        Logger.error("Failed to restart Bandit server", reason: inspect(reason))
        {:reply, {:error, reason}, state}
    end
  end

  @impl GenServer
  def handle_info({:bandit, pid, :shutdown}, %{pid: pid} = state) do
    Logger.warning("Bandit server shutdown unexpectedly")
    {:noreply, %{state | pid: nil}}
  end

  @impl GenServer
  def handle_info(msg, state) do
    Logger.debug("Unhandled message in HTTPServer", message: inspect(msg))
    {:noreply, state}
  end

  @impl GenServer
  def terminate(reason, state) do
    if state.pid do
      Bandit.shutdown(state.pid)
    end
    
    stop_metrics_collection(state.metrics_ref)
    
    Logger.info("HTTPServer terminated", reason: inspect(reason))
    :ok
  end

  # Private implementation functions
  defp build_server_options(port, scheme, plug, extra_options) do
    base_options = [
      port: port,
      plug: plug,
      
      # Performance optimizations
      pool_size: System.schedulers_online() * 2,
      max_connections: Application.get_env(:bandit, :max_connections, 16_384),
      
      # Timeout configurations
      read_timeout: Application.get_env(:bandit, :read_timeout, 30_000),
      request_timeout: 60_000,
      
      # HTTP/2 support
      http_2_enabled: true,
      
      # Compression
      compress: true,
      
      # Security headers
      security_headers: [
        # Prevent MIME type sniffing
        {"x-content-type-options", "nosniff"},
        # XSS protection
        {"x-xss-protection", "1; mode=block"},
        # Frame options
        {"x-frame-options", "DENY"},
        # Referrer policy
        {"referrer-policy", "strict-origin-when-cross-origin"},
        # Content security policy
        {"content-security-policy", build_csp_header()}
      ],
      
      # Custom error handling
      error_handler: {MyApp.BanditErrorHandler, :handle_error},
      
      # Request logging
      access_log: build_access_log_config(),
      
      # Metrics collection
      metrics: [
        {MyApp.BanditMetrics, :record_request}
      ]
    ]

    # Add scheme-specific options
    scheme_options = case scheme do
      :https -> build_https_options()
      :http -> []
    end

    Keyword.merge(base_options, scheme_options ++ extra_options)
  end

  defp build_https_options do
    [
      # TLS configuration
      transport_options: [
        versions: [:"tlsv1.2", :"tlsv1.3"],
        ciphers: get_secure_ciphers(),
        honor_cipher_order: true,
        secure_renegotiate: true,
        reuse_sessions: true,
        
        # Certificate configuration
        keyfile: get_ssl_keyfile(),
        certfile: get_ssl_certfile(),
        cacertfile: get_ssl_cacertfile(),
        
        # ALPN for HTTP/2
        alpn_preferred_protocols: ["h2", "http/1.1"],
        
        # Security enhancements
        verify: :verify_peer,
        fail_if_no_peer_cert: false,
        
        # HSTS support
        hsts_header: "max-age=31536000; includeSubDomains; preload"
      ]
    ]
  end

  defp build_csp_header do
    "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'none';"
  end

  defp build_access_log_config do
    log_path = Application.get_env(:bandit, :access_log_path, "logs/bandit_access.log")
    
    [
      format: :combined,
      file: log_path,
      # Rotate logs daily
      rotate: [
        frequency: :daily,
        keep: 30
      ]
    ]
  end

  defp get_secure_ciphers do
    # Modern, secure cipher suites
    [
      # TLS 1.3 ciphers
      :"TLS_AES_256_GCM_SHA384",
      :"TLS_AES_128_GCM_SHA256",
      :"TLS_CHACHA20_POLY1305_SHA256",
      
      # TLS 1.2 ciphers
      :"ECDHE-ECDSA-AES256-GCM-SHA384",
      :"ECDHE-RSA-AES256-GCM-SHA384",
      :"ECDHE-ECDSA-CHACHA20-POLY1305",
      :"ECDHE-RSA-CHACHA20-POLY1305",
      :"ECDHE-ECDSA-AES128-GCM-SHA256",
      :"ECDHE-RSA-AES128-GCM-SHA256"
    ]
  end

  defp get_ssl_keyfile do
    System.get_env("SSL_KEY_PATH") || 
    Application.get_env(:bandit, :ssl_keyfile) ||
    raise "SSL key file not configured"
  end

  defp get_ssl_certfile do
    System.get_env("SSL_CERT_PATH") || 
    Application.get_env(:bandit, :ssl_certfile) ||
    raise "SSL certificate file not configured"
  end

  defp get_ssl_cacertfile do
    System.get_env("SSL_CA_PATH") || 
    Application.get_env(:bandit, :ssl_cacertfile)
  end

  defp start_bandit_server(options) do
    try do
      Bandit.start_link(options)
    rescue
      error ->
        Logger.error("Bandit server start error", 
          error: inspect(error),
          stacktrace: __STACKTRACE__
        )
        {:error, error}
    end
  end

  defp restart_server(state) do
    # Stop current server
    if state.pid do
      :ok = Bandit.shutdown(state.pid)
    end

    # Start new server
    start_bandit_server(state.options)
  end

  defp start_metrics_collection do
    :ets.new(:bandit_metrics, [:set, :public, :named_table])
  end

  defp stop_metrics_collection(nil), do: :ok
  defp stop_metrics_collection(ref) when is_reference(ref) do
    if :ets.info(:bandit_metrics) != :undefined do
      :ets.delete(:bandit_metrics)
    end
    :ok
  end

  defp get_connection_count(nil), do: 0
  defp get_connection_count(pid) when is_pid(pid) do
    # This would integrate with Bandit's connection tracking
    # Simplified implementation
    case Process.info(pid, :links) do
      {:links, links} -> length(links)
      nil -> 0
    end
  end

  defp get_request_count(nil), do: 0
  defp get_request_count(_ref) do
    case :ets.lookup(:bandit_metrics, :total_requests) do
      [{:total_requests, count}] -> count
      [] -> 0
    end
  end
end

# Custom error handler for enhanced error reporting
defmodule MyApp.BanditErrorHandler do
  @moduledoc """
  Custom error handler for Bandit server providing comprehensive error logging,
  metrics collection, and graceful error responses.
  """

  require Logger

  @type error_type :: :bad_request | :timeout | :too_large | :internal_error | :unknown
  @type error_details :: %{
    type: error_type(),
    message: String.t(),
    conn: Plug.Conn.t(),
    stacktrace: list(),
    timestamp: DateTime.t()
  }

  @spec handle_error(term(), Plug.Conn.t()) :: Plug.Conn.t()
  def handle_error(error, conn) do
    error_details = analyze_error(error, conn)
    
    # Log the error with context
    log_error(error_details)
    
    # Record metrics
    record_error_metrics(error_details)
    
    # Send appropriate response
    send_error_response(conn, error_details)
  end

  defp analyze_error(error, conn) do
    {error_type, message} = case error do
      %Plug.BadRequestError{} -> 
        {:bad_request, "Invalid request format"}
      
      %Plug.TimeoutError{} -> 
        {:timeout, "Request timeout"}
      
      %Plug.RequestTooLargeError{} -> 
        {:too_large, "Request entity too large"}
      
      %Protocol.UndefinedError{protocol: Plug.Exception} ->
        {:internal_error, "Internal server error"}
      
      %FunctionClauseError{} ->
        {:internal_error, "Function clause error"}
      
      %RuntimeError{message: msg} ->
        {:internal_error, msg}
      
      error when is_binary(error) ->
        {:unknown, error}
      
      _ ->
        {:unknown, "Unknown error: #{inspect(error)}"}
    end

    %{
      type: error_type,
      message: message,
      conn: conn,
      stacktrace: __STACKTRACE__,
      timestamp: DateTime.utc_now()
    }
  end

  defp log_error(error_details) do
    log_level = case error_details.type do
      :bad_request -> :warning
      :timeout -> :warning
      :too_large -> :warning
      _ -> :error
    end

    Logger.log(log_level, "Bandit HTTP error",
      error_type: error_details.type,
      message: error_details.message,
      method: error_details.conn.method,
      path: error_details.conn.request_path,
      remote_ip: get_remote_ip(error_details.conn),
      user_agent: get_user_agent(error_details.conn),
      timestamp: error_details.timestamp
    )
  end

  defp record_error_metrics(error_details) do
    if :ets.info(:bandit_metrics) != :undefined do
      # Increment total error count
      :ets.update_counter(:bandit_metrics, :total_errors, 1, {:total_errors, 0})
      
      # Increment error type count
      error_key = :"errors_#{error_details.type}"
      :ets.update_counter(:bandit_metrics, error_key, 1, {error_key, 0})
    end
  end

  defp send_error_response(conn, error_details) do
    {status_code, response_body} = case error_details.type do
      :bad_request -> 
        {400, %{error: "Bad Request", message: "The request could not be understood"}}
      
      :timeout -> 
        {408, %{error: "Request Timeout", message: "The request took too long to process"}}
      
      :too_large -> 
        {413, %{error: "Payload Too Large", message: "The request entity is too large"}}
      
      :internal_error -> 
        {500, %{error: "Internal Server Error", message: "An unexpected error occurred"}}
      
      _ -> 
        {500, %{error: "Internal Server Error", message: "An unexpected error occurred"}}
    end

    # Add security headers
    conn
    |> Plug.Conn.put_resp_header("content-type", "application/json")
    |> add_security_headers()
    |> Plug.Conn.resp(status_code, Jason.encode!(response_body))
    |> Plug.Conn.halt()
  end

  defp add_security_headers(conn) do
    conn
    |> Plug.Conn.put_resp_header("x-content-type-options", "nosniff")
    |> Plug.Conn.put_resp_header("x-frame-options", "DENY")
    |> Plug.Conn.put_resp_header("x-xss-protection", "1; mode=block")
  end

  defp get_remote_ip(conn) do
    case Plug.Conn.get_req_header(conn, "x-forwarded-for") do
      [forwarded_for | _] -> 
        forwarded_for |> String.split(",") |> List.first() |> String.trim()
      [] -> 
        conn.remote_ip |> Tuple.to_list() |> Enum.join(".")
    end
  end

  defp get_user_agent(conn) do
    case Plug.Conn.get_req_header(conn, "user-agent") do
      [user_agent | _] -> user_agent
      [] -> "Unknown"
    end
  end
end

# Metrics collection module
defmodule MyApp.BanditMetrics do
  @moduledoc """
  Metrics collection and reporting for Bandit HTTP server performance monitoring.
  """

  require Logger

  @spec record_request(Plug.Conn.t()) :: Plug.Conn.t()
  def record_request(conn) do
    start_time = System.monotonic_time(:microsecond)
    
    # Record request start
    if :ets.info(:bandit_metrics) != :undefined do
      :ets.update_counter(:bandit_metrics, :total_requests, 1, {:total_requests, 0})
      :ets.update_counter(:bandit_metrics, :active_requests, 1, {:active_requests, 0})
    end

    # Add completion callback
    Plug.Conn.register_before_send(conn, fn conn ->
      record_request_completion(conn, start_time)
      conn
    end)
  end

  @spec get_metrics() :: %{
    total_requests: non_neg_integer(),
    active_requests: non_neg_integer(),
    total_errors: non_neg_integer(),
    average_response_time: float(),
    requests_per_second: float()
  }
  def get_metrics do
    if :ets.info(:bandit_metrics) != :undefined do
      total_requests = get_metric(:total_requests)
      active_requests = get_metric(:active_requests)
      total_errors = get_metric(:total_errors)
      total_response_time = get_metric(:total_response_time)
      
      average_response_time = if total_requests > 0 do
        total_response_time / total_requests / 1000  # Convert to milliseconds
      else
        0.0
      end

      # Calculate requests per second (simplified)
      uptime_seconds = get_uptime_seconds()
      requests_per_second = if uptime_seconds > 0 do
        total_requests / uptime_seconds
      else
        0.0
      end

      %{
        total_requests: total_requests,
        active_requests: active_requests,
        total_errors: total_errors,
        average_response_time: average_response_time,
        requests_per_second: requests_per_second
      }
    else
      %{
        total_requests: 0,
        active_requests: 0,
        total_errors: 0,
        average_response_time: 0.0,
        requests_per_second: 0.0
      }
    end
  end

  @spec reset_metrics() :: :ok
  def reset_metrics do
    if :ets.info(:bandit_metrics) != :undefined do
      :ets.delete_all_objects(:bandit_metrics)
      :ets.insert(:bandit_metrics, {:start_time, System.monotonic_time(:second)})
    end
    :ok
  end

  defp record_request_completion(conn, start_time) do
    end_time = System.monotonic_time(:microsecond)
    duration = end_time - start_time

    if :ets.info(:bandit_metrics) != :undefined do
      # Update counters
      :ets.update_counter(:bandit_metrics, :active_requests, -1, {:active_requests, 0})
      :ets.update_counter(:bandit_metrics, :total_response_time, duration, {:total_response_time, 0})
      
      # Record status code metrics
      status_key = :"status_#{div(conn.status, 100)}xx"
      :ets.update_counter(:bandit_metrics, status_key, 1, {status_key, 0})
    end

    # Log slow requests
    if duration > 5_000_000 do  # 5 seconds
      Logger.warning("Slow request detected",
        method: conn.method,
        path: conn.request_path,
        duration_ms: duration / 1000,
        status: conn.status
      )
    end
  end

  defp get_metric(key) do
    case :ets.lookup(:bandit_metrics, key) do
      [{^key, value}] -> value
      [] -> 0
    end
  end

  defp get_uptime_seconds do
    case :ets.lookup(:bandit_metrics, :start_time) do
      [{:start_time, start_time}] -> 
        System.monotonic_time(:second) - start_time
      [] -> 
        0
    end
  end
end

# Supervisor for HTTP server
defmodule MyApp.HTTPServerSupervisor do
  @moduledoc """
  Supervisor for the HTTP server ensuring reliable operation and restart policies.
  """

  use Supervisor

  def start_link(init_arg) do
    Supervisor.start_link(__MODULE__, init_arg, name: __MODULE__)
  end

  @impl true
  def init(_init_arg) do
    children = [
      # HTTP Server
      {MyApp.HTTPServer, [
        port: Application.get_env(:my_app, :http_port, 4000),
        scheme: :http,
        plug: MyAppWeb.Endpoint
      ]},
      
      # HTTPS Server (if configured)
      https_server_spec(),
      
      # Metrics reporter
      {MyApp.MetricsReporter, []}
    ]
    |> Enum.reject(&is_nil/1)

    Supervisor.init(children, strategy: :one_for_one)
  end

  defp https_server_spec do
    if Application.get_env(:my_app, :https_enabled, false) do
      {MyApp.HTTPServer, [
        port: Application.get_env(:my_app, :https_port, 4443),
        scheme: :https,
        plug: MyAppWeb.Endpoint,
        name: MyApp.HTTPSServer
      ]}
    else
      nil
    end
  end
end

# Health check and status endpoints
defmodule MyApp.StatusPlug do
  @moduledoc """
  Health check and status endpoints for monitoring and load balancer integration.
  """

  import Plug.Conn

  def init(options), do: options

  def call(%Plug.Conn{path_info: ["health"]} = conn, _opts) do
    health_status = check_health()
    
    {status_code, response} = case health_status.status do
      :healthy -> {200, health_status}
      :degraded -> {200, health_status}  # Still serving but with warnings
      :unhealthy -> {503, health_status}
    end

    conn
    |> put_resp_content_type("application/json")
    |> resp(status_code, Jason.encode!(response))
    |> halt()
  end

  def call(%Plug.Conn{path_info: ["status"]} = conn, _opts) do
    server_status = MyApp.HTTPServer.get_status()
    metrics = MyApp.BanditMetrics.get_metrics()
    
    status_response = %{
      server: server_status,
      metrics: metrics,
      timestamp: DateTime.utc_now()
    }

    conn
    |> put_resp_content_type("application/json")
    |> resp(200, Jason.encode!(status_response))
    |> halt()
  end

  def call(conn, _opts), do: conn

  defp check_health do
    checks = [
      database_check(),
      cache_check(),
      external_service_check()
    ]

    failed_checks = Enum.filter(checks, fn check -> check.status != :ok end)
    
    overall_status = cond do
      Enum.empty?(failed_checks) -> :healthy
      Enum.any?(failed_checks, fn check -> check.critical end) -> :unhealthy
      true -> :degraded
    end

    %{
      status: overall_status,
      checks: checks,
      timestamp: DateTime.utc_now()
    }
  end

  defp database_check do
    try do
      # Perform a simple database query
      case MyApp.Repo.query("SELECT 1", []) do
        {:ok, _result} -> 
          %{name: "database", status: :ok, critical: true}
        {:error, reason} -> 
          %{name: "database", status: :error, critical: true, error: inspect(reason)}
      end
    rescue
      error ->
        %{name: "database", status: :error, critical: true, error: inspect(error)}
    end
  end

  defp cache_check do
    # Simple cache connectivity check
    %{name: "cache", status: :ok, critical: false}
  end

  defp external_service_check do
    # Check external service connectivity
    %{name: "external_services", status: :ok, critical: false}
  end
end]]></correct-example>
          <incorrect-example title="Poor Bandit usage without proper configuration or security" conditions="Setting up Bandit HTTP server" expected-result="Secure, optimized HTTP server" incorrectness-criteria="No security configuration, missing error handling, poor performance, no monitoring"><![CDATA[# BAD: Poor Bandit implementation

# Basic configuration without security or optimization
config :bandit,
  port: 4000

# Simple server start without proper configuration
defmodule BadHTTPServer do
  def start do
    # No error handling
    Bandit.start_link(port: 4000, plug: MyApp.Endpoint)
  end

  # No stop function
  # No status monitoring
  # No metrics collection
  # No error handling
  # No security configuration
  # No performance optimization
  # No logging
end

# No custom error handler
# No metrics collection
# No health checks
# No HTTPS support
# No security headers
# No proper supervision
# No graceful shutdown
# No connection management]]></incorrect-example>
        </example>
      </examples>
    </non-negotiable>

    <requirement priority="high">
      <description>Implement comprehensive testing for Bandit server functionality including integration tests, performance benchmarks, security validation, and error handling verification.</description>
      <examples>
        <example title="Bandit Testing Patterns">
          <correct-example title="Comprehensive testing for HTTP server functionality" conditions="Testing Bandit HTTP server implementation" expected-result="Thorough test coverage with performance and security validation" correctness-criteria="Integration tests, performance tests, security tests, error handling validation"><![CDATA[# Elixir - Comprehensive Bandit HTTP server testing

defmodule MyApp.HTTPServerTest do
  use ExUnit.Case, async: false
  
  @test_port 4999

  setup do
    # Start test server
    {:ok, pid} = MyApp.HTTPServer.start_link([
      port: @test_port,
      scheme: :http,
      plug: MyApp.TestPlug
    ])

    on_exit(fn ->
      if Process.alive?(pid) do
        MyApp.HTTPServer.stop()
      end
    end)

    %{server_pid: pid}
  end

  describe "server lifecycle" do
    test "starts and stops successfully", %{server_pid: pid} do
      assert Process.alive?(pid)
      
      status = MyApp.HTTPServer.get_status()
      assert status.running == true
      assert status.port == @test_port
      assert status.scheme == :http
      
      assert :ok = MyApp.HTTPServer.stop()
      
      # Allow time for graceful shutdown
      Process.sleep(100)
      
      status = MyApp.HTTPServer.get_status()
      assert status.running == false
    end

    test "restarts successfully" do
      original_status = MyApp.HTTPServer.get_status()
      assert original_status.running == true
      
      assert :ok = MyApp.HTTPServer.restart()
      
      # Allow time for restart
      Process.sleep(100)
      
      new_status = MyApp.HTTPServer.get_status()
      assert new_status.running == true
      assert new_status.uptime < original_status.uptime
    end
  end

  describe "HTTP requests" do
    test "handles GET requests correctly" do
      url = "http://localhost:#{@test_port}/test"
      
      assert {:ok, %{status_code: 200, body: body}} = HTTPoison.get(url)
      assert body =~ "Test response"
    end

    test "handles POST requests with JSON body" do
      url = "http://localhost:#{@test_port}/test"
      headers = [{"content-type", "application/json"}]
      body = Jason.encode!(%{message: "test"})
      
      assert {:ok, %{status_code: 200}} = HTTPoison.post(url, body, headers)
    end

    test "handles large request bodies" do
      url = "http://localhost:#{@test_port}/test"
      large_body = String.duplicate("x", 1024 * 1024)  # 1MB
      
      assert {:ok, %{status_code: 200}} = HTTPoison.post(url, large_body)
    end

    test "rejects oversized request bodies" do
      url = "http://localhost:#{@test_port}/test"
      oversized_body = String.duplicate("x", 200 * 1024 * 1024)  # 200MB
      
      assert {:error, _} = HTTPoison.post(url, oversized_body)
    end
  end

  describe "error handling" do
    test "handles malformed requests gracefully" do
      # Send raw malformed HTTP request
      {:ok, socket} = :gen_tcp.connect('localhost', @test_port, [:binary, active: false])
      :gen_tcp.send(socket, "INVALID HTTP REQUEST\r\n\r\n")
      
      {:ok, response} = :gen_tcp.recv(socket, 0, 5000)
      :gen_tcp.close(socket)
      
      assert response =~ "400"  # Bad Request
    end

    test "handles connection timeouts" do
      # This would test timeout behavior - simplified for example
      assert true
    end

    test "custom error handler is called" do
      # Test that custom error handler processes errors correctly
      url = "http://localhost:#{@test_port}/error"
      
      assert {:ok, %{status_code: 500, body: body}} = HTTPoison.get(url)
      assert body =~ "Internal Server Error"
    end
  end

  describe "security features" do
    test "includes security headers in responses" do
      url = "http://localhost:#{@test_port}/test"
      
      assert {:ok, %{headers: headers}} = HTTPoison.get(url)
      
      header_map = Map.new(headers, fn {k, v} -> {String.downcase(k), v} end)
      
      assert Map.has_key?(header_map, "x-content-type-options")
      assert Map.has_key?(header_map, "x-frame-options")
      assert Map.has_key?(header_map, "x-xss-protection")
    end

    test "enforces content security policy" do
      url = "http://localhost:#{@test_port}/test"
      
      assert {:ok, %{headers: headers}} = HTTPoison.get(url)
      
      csp_header = Enum.find(headers, fn {k, _v} -> 
        String.downcase(k) == "content-security-policy"
      end)
      
      assert csp_header != nil
      {_, csp_value} = csp_header
      assert csp_value =~ "default-src 'self'"
    end
  end

  describe "performance" do
    @tag :performance
    test "handles concurrent requests efficiently" do
      url = "http://localhost:#{@test_port}/test"
      
      # Create 100 concurrent requests
      tasks = Enum.map(1..100, fn _i ->
        Task.async(fn ->
          HTTPoison.get(url)
        end)
      end)
      
      start_time = System.monotonic_time(:millisecond)
      results = Task.await_many(tasks, 10_000)
      end_time = System.monotonic_time(:millisecond)
      
      # All requests should succeed
      assert Enum.all?(results, fn 
        {:ok, %{status_code: 200}} -> true
        _ -> false
      end)
      
      # Should complete within reasonable time
      duration = end_time - start_time
      assert duration < 5000  # 5 seconds
    end

    @tag :performance
    test "maintains low memory usage under load" do
      initial_memory = get_memory_usage()
      
      # Generate load
      Enum.each(1..1000, fn _i ->
        HTTPoison.get("http://localhost:#{@test_port}/test")
      end)
      
      final_memory = get_memory_usage()
      memory_increase = final_memory - initial_memory
      
      # Memory increase should be reasonable
      assert memory_increase < 50 * 1024 * 1024  # 50MB
    end
  end

  describe "metrics collection" do
    test "records request metrics correctly" do
      initial_metrics = MyApp.BanditMetrics.get_metrics()
      initial_requests = initial_metrics.total_requests
      
      # Make some requests
      Enum.each(1..10, fn _i ->
        HTTPoison.get("http://localhost:#{@test_port}/test")
      end)
      
      final_metrics = MyApp.BanditMetrics.get_metrics()
      
      assert final_metrics.total_requests == initial_requests + 10
      assert final_metrics.average_response_time > 0
    end

    test "tracks error metrics" do
      initial_metrics = MyApp.BanditMetrics.get_metrics()
      initial_errors = initial_metrics.total_errors
      
      # Trigger an error
      HTTPoison.get("http://localhost:#{@test_port}/error")
      
      final_metrics = MyApp.BanditMetrics.get_metrics()
      
      assert final_metrics.total_errors == initial_errors + 1
    end
  end

  describe "health checks" do
    test "health endpoint returns proper status" do
      url = "http://localhost:#{@test_port}/health"
      
      assert {:ok, %{status_code: 200, body: body}} = HTTPoison.get(url)
      
      health_status = Jason.decode!(body)
      assert health_status["status"] in ["healthy", "degraded", "unhealthy"]
      assert is_list(health_status["checks"])
    end

    test "status endpoint returns server information" do
      url = "http://localhost:#{@test_port}/status"
      
      assert {:ok, %{status_code: 200, body: body}} = HTTPoison.get(url)
      
      status = Jason.decode!(body)
      assert Map.has_key?(status, "server")
      assert Map.has_key?(status, "metrics")
      assert Map.has_key?(status, "timestamp")
    end
  end

  # Test plug for server testing
  defmodule TestPlug do
    import Plug.Conn

    def init(options), do: options

    def call(%Plug.Conn{path_info: ["test"]} = conn, _opts) do
      conn
      |> put_resp_content_type("text/plain")
      |> resp(200, "Test response")
    end

    def call(%Plug.Conn{path_info: ["error"]} = conn, _opts) do
      raise "Test error"
    end

    def call(conn, _opts) do
      MyApp.StatusPlug.call(conn, [])
    end
  end

  # Helper functions
  defp get_memory_usage do
    :erlang.memory(:total)
  end
end

# Performance benchmarking
defmodule MyApp.HTTPServerBenchmark do
  @moduledoc """
  Performance benchmarks for HTTP server functionality.
  """

  def run_benchmarks do
    # Server throughput benchmark
    throughput_benchmark()
    
    # Latency benchmark
    latency_benchmark()
    
    # Memory usage benchmark
    memory_benchmark()
    
    # Connection handling benchmark
    connection_benchmark()
  end

  defp throughput_benchmark do
    IO.puts("Running throughput benchmark...")
    
    # Start test server
    {:ok, _pid} = MyApp.HTTPServer.start_link([
      port: 5000,
      plug: MyApp.HTTPServerTest.TestPlug
    ])
    
    # Measure requests per second
    duration = 10_000  # 10 seconds
    start_time = System.monotonic_time(:millisecond)
    end_time = start_time + duration
    
    request_count = count_requests_until(end_time, 0)
    
    rps = request_count / (duration / 1000)
    
    IO.puts("Throughput: #{Float.round(rps, 2)} requests/second")
    
    MyApp.HTTPServer.stop()
  end

  defp count_requests_until(end_time, count) do
    if System.monotonic_time(:millisecond) < end_time do
      case HTTPoison.get("http://localhost:5000/test") do
        {:ok, %{status_code: 200}} ->
          count_requests_until(end_time, count + 1)
        _ ->
          count_requests_until(end_time, count)
      end
    else
      count
    end
  end

  defp latency_benchmark do
    IO.puts("Running latency benchmark...")
    
    # Measure response times for multiple requests
    latencies = Enum.map(1..100, fn _i ->
      start_time = System.monotonic_time(:microsecond)
      HTTPoison.get("http://localhost:5000/test")
      end_time = System.monotonic_time(:microsecond)
      
      (end_time - start_time) / 1000  # Convert to milliseconds
    end)
    
    average_latency = Enum.sum(latencies) / length(latencies)
    min_latency = Enum.min(latencies)
    max_latency = Enum.max(latencies)
    
    IO.puts("Average latency: #{Float.round(average_latency, 2)}ms")
    IO.puts("Min latency: #{Float.round(min_latency, 2)}ms")
    IO.puts("Max latency: #{Float.round(max_latency, 2)}ms")
  end

  defp memory_benchmark do
    IO.puts("Running memory benchmark...")
    
    initial_memory = :erlang.memory(:total)
    
    # Generate load
    tasks = Enum.map(1..1000, fn _i ->
      Task.async(fn ->
        HTTPoison.get("http://localhost:5000/test")
      end)
    end)
    
    Task.await_many(tasks)
    
    # Force garbage collection
    :erlang.garbage_collect()
    
    final_memory = :erlang.memory(:total)
    memory_increase = final_memory - initial_memory
    
    IO.puts("Memory increase: #{div(memory_increase, 1024 * 1024)}MB")
  end

  defp connection_benchmark do
    IO.puts("Running connection benchmark...")
    
    # Test concurrent connections
    max_connections = 1000
    
    tasks = Enum.map(1..max_connections, fn _i ->
      Task.async(fn ->
        case HTTPoison.get("http://localhost:5000/test") do
          {:ok, %{status_code: 200}} -> :success
          _ -> :failure
        end
      end)
    end)
    
    results = Task.await_many(tasks, 30_000)
    successful = Enum.count(results, &(&1 == :success))
    
    success_rate = successful / max_connections * 100
    
    IO.puts("Connection success rate: #{Float.round(success_rate, 2)}%")
  end
end]]></correct-example>
          <incorrect-example title="Poor Bandit testing without comprehensive coverage" conditions="Testing HTTP server functionality" expected-result="Comprehensive test coverage" incorrectness-criteria="No integration testing, missing performance tests, no security validation, poor error handling coverage"><![CDATA[# BAD: Poor Bandit testing

defmodule BadHTTPServerTest do
  use ExUnit.Case
  
  # Only basic functionality testing
  test "server starts" do
    assert {:ok, _pid} = Bandit.start_link(port: 4000, plug: MyApp.Endpoint)
  end

  # No comprehensive testing
  # No performance testing
  # No security testing
  # No error handling testing
  # No metrics testing
  # No health check testing
  # No integration testing
  # No load testing
  # No memory testing
  # No connection testing
end]]></incorrect-example>
        </example>
      </examples>
    </requirement>
  </requirements>
  
  <context description="Bandit HTTP server considerations">
    Bandit is a modern HTTP server for Elixir built on top of Thousand Island, designed for performance, security, and standards compliance. It provides HTTP/1.1 and HTTP/2 support with efficient connection handling and comprehensive configuration options.

    Key considerations include:
    - Performance optimization through connection pooling and efficient request handling
    - Security configuration including TLS, security headers, and input validation
    - Proper error handling and graceful degradation under load
    - Monitoring and metrics collection for operational visibility
    - Integration with Plug ecosystem for middleware and request processing
    - Production deployment considerations including supervision and health checks

    Bandit is particularly well-suited for high-performance applications requiring modern HTTP features, security compliance, and operational reliability in production environments.
  </context>
  
  <references>
    <reference as="dependency" href=".cursor/rules/000-core/002-cursor-rules-creation.mdc" reason="Follows standard rule format">Base rule format definition</reference>
    <reference as="context" href="https://hexdocs.pm/bandit/" reason="Official Bandit documentation">Bandit Package Documentation</reference>
    <reference as="context" href="https://github.com/mtrudel/bandit" reason="Bandit source code and examples">Bandit GitHub Repository</reference>
  </references>
</rule>
description:
globs:
alwaysApply: false
---
