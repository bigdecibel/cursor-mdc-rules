---
description: "Rules for PostgreSQL best practices"
globs: "*.sql"
alwaysApply: false
---

<rule>
  <meta>
    <title>PostgreSQL Best Practices</title>
    <description>A rule to enforce PostgreSQL best practices for schema design, query optimization, and security.</description>
    <created-at utc-timestamp="1744326000">April 11, 2025, 11:00 AM AEST</created-at>
    <last-updated-at utc-timestamp="1744326000">April 11, 2025, 11:00 AM AEST</last-updated-at>
    <applies-to>
      <file-matcher glob="*.sql">All SQL files with .sql extension</file-matcher>
      <action-matcher action="sql-commit">Triggered when committing SQL changes</action-matcher>
    </applies-to>
  </meta>
  <requirements>
    <requirement priority="high">
      <description>Use consistent naming conventions for all database objects (tables, columns, views, etc.). Use snake_case for identifiers and plural nouns for table names.</description>
        <examples>
            <example title="Naming Conventions">
                <correct-example title="Consistent Naming" conditions="Creating a new table" expected-result="Table and column names are in snake_case" correctness-criteria="Follows the established naming convention"><![CDATA[CREATE TABLE user_profiles (
    user_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50)
);]]></correct-example>
                <incorrect-example title="Inconsistent Naming" conditions="Creating a new table" expected-result="Table and column names are in snake_case" incorrectness-criteria="Does not follow the established naming convention"><![CDATA[CREATE TABLE UserProfiles (
    UserID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50)
);]]></incorrect-example>
            </example>
        </examples>
    </requirement>
    <requirement priority="high">
        <description>Use appropriate data types for all columns to optimize storage and performance, and use constraints to enforce data integrity.</description>
    </requirement>
    <requirement priority="critical">
        <description>Never store passwords in plaintext. Use a strong hashing algorithm like bcrypt.</description>
    </requirement>
    <requirement priority="high">
        <description>Use foreign key constraints to maintain data integrity.</description>
    </requirement>
    <requirement priority="medium">
        <description>Use indexes to optimize query performance, but avoid over-indexing.</description>
    </requirement>
    <requirement priority="medium">
        <description>Maintain consistent code formatting and use clear comments to explain complex logic.</description>
    </requirement>
    <requirement priority="critical">
        <description>Always use parameterized queries or prepared statements to prevent SQL injection attacks.</description>
    </requirement>
    <requirement priority="high">
        <description>Use explicit transactions to ensure data consistency and atomicity.</description>
    </requirement>
    <requirement priority="high">
        <description>Use EXPLAIN ANALYZE to analyze query execution plans and identify performance bottlenecks.</description>
    </requirement>
    <requirement priority="medium">
        <description>Keep PL/pgSQL functions and procedures short and focused, with proper error handling.</description>
    </requirement>
    <requirement priority="critical">
        <description>Grant the least privileges necessary to database users and use roles to manage permissions.</description>
    </requirement>
    <requirement priority="high">
        <description>Use connection pooling to manage database connections efficiently.</description>
    </requirement>
    <requirement priority="critical">
        <description>Implement a robust backup and recovery strategy, and test it regularly.</description>
    </requirement>
    <requirement priority="high">
        <description>Organize database objects into schemas and use version control for database scripts.</description>
    </requirement>
  </requirements>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
    <reference as="context" href="./rules/postgresql_security_rules.mdc" reason="Provides additional security context">PostgreSQL Security Rules</reference>
  </references>
</rule>
