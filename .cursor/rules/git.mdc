---
description: "Rules for Git best practices"
globs: "*"
alwaysApply: false
---

<rule>
  <meta>
    <title>Git Best Practices</title>
    <description>A rule to enforce Git best practices, including commit message format and branch management.</description>
    <created-at utc-timestamp="1744326000">April 11, 2025, 11:00 AM AEST</created-at>
    <last-updated-at utc-timestamp="1744326000">April 11, 2025, 11:00 AM AEST</last-updated-at>
    <applies-to>
      <action-matcher action="git-commit">Triggered when creating a git commit</action-matcher>
    </applies-to>
  </meta>
  <requirements>
    <requirement priority="critical">
      <description>Commit messages must follow the conventional commit format.</description>
      <examples>
        <example title="Commit Message Format">
          <correct-example title="Valid commit message" conditions="Committing a new feature" expected-result="A well-formed commit message" correctness-criteria="Follows the conventional commit format"><![CDATA[feat: add user authentication

Implement user login and registration endpoints.
]]></correct-example>
          <incorrect-example title="Invalid commit message" conditions="Committing a fix" expected-result="A well-formed commit message" incorrectness-criteria="Does not follow the conventional commit format"><![CDATA[Fixed bug]]></incorrect-example>
        </example>
      </examples>
    </requirement>
    <requirement priority="high">
        <description>Keep a clean and linear git history using rebase.</description>
        <examples>
            <example title="Rebasing a feature branch">
                <correct-example title="Feature branch rebased on main" conditions="Integrating a feature branch" expected-result="A linear history" correctness-criteria="The feature branch is rebased onto the main branch before merging."><![CDATA[git checkout feature-branch
git rebase main
git checkout main
git merge feature-branch --ff-only]]></correct-example>
                <incorrect-example title="Merge commit from main" conditions="Integrating a feature branch" expected-result="A linear history" incorrectness-criteria="A merge commit is created instead of rebasing, leading to a non-linear history."><![CDATA[git checkout feature-branch
git merge main]]></incorrect-example>
            </example>
        </examples>
    </requirement>
    <requirement priority="high">
        <description>Use atomic commits. Each commit should address a single, logical change.</description>
    </requirement>
    <requirement priority="medium">
        <description>Write clear, concise, and informative commit messages that explain the *why* behind the change.</description>
    </requirement>
    <requirement priority="high">
        <description>Use feature branches for each new feature or bug fix to isolate changes.</description>
    </requirement>
    <requirement priority="medium">
        <description>Keep feature branches up-to-date with the main branch by rebasing or merging regularly.</description>
    </requirement>
    <requirement priority="critical">
        <description>Never commit secrets, passwords, API keys, or other sensitive information to the Git repository.</description>
    </requirement>
    <requirement priority="high">
        <description>Use a `.gitignore` file to exclude files and directories that should not be tracked by Git.</description>
    </requirement>
    <requirement priority="high">
        <description>Use pull requests for all code changes to facilitate code review and discussion.</description>
    </requirement>
    <requirement priority="medium">
        <description>Provide constructive feedback during code reviews, focusing on improving the code.</description>
    </requirement>
     <requirement priority="medium">
        <description>Use Git LFS for storing large files to prevent the repository from becoming bloated.</description>
    </requirement>
    <requirement priority="high">
        <description>Use `git revert` to undo changes that have already been pushed to a public repository.</description>
    </requirement>
    <requirement priority="medium">
        <description>Create annotated tags to mark significant releases or milestones, following semantic versioning.</description>
    </requirement>
    <requirement priority="low">
        <description>Regularly clean up the Git repository by removing unused branches and tags.</description>
    </requirement>
    <requirement priority="high">
        <description>Integrate Git with a CI/CD system to automate testing and deployment.</description>
    </requirement>
  </requirements>
  <references>
    <reference as="dependency" href=".cursor/rules/rules.mdc" reason="Follows standard rule format">Base rule format definition</reference>
  </references>
</rule>
